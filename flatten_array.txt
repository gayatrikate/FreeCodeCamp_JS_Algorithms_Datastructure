const a = [1, 2, 3, [4, [1, 2], 5, 6], 8, 9];

const flatten = (arr, depth = 1) => {
  let newArr = [];
  arr.forEach((element) => {
    if (Array.isArray(element) && depth > 0) {
      newArr = newArr.concat(flatten(element, depth - 1));
    } else {
      newArr.push(element);
    }
  });
  return newArr;
};

console.log(flatten(a, 2));

*******************************************************************************
Without depth

const a = [1, 2, 3, [4, [1, 2], 5, 6], 8, 9];

const flatten = (arr) => {
  let newArr = [];
  arr.forEach((element) => {
    if (Array.isArray(element)) {
      newArr = newArr.concat(flatten(element));
    } else {
      newArr.push(element);
    }
  });
  return newArr;
};

console.log(flatten(a));
***************************************************************************************

With reduce method

var array = [1, 2, [[3, 4, 5], 8], 9, 10];
const flatten = (arr) => {
  let someNewArray = arr.reduce((acc, item) => {
    if (Array.isArray(item)) {
      acc = acc.concat(flatten(item));
    } else {
      acc.push(item);
    }
    return acc;
  }, []);
  return someNewArray;
};

let a = flatten(array);
console.log(a);

**********************************************************************************************

const a = [1, 2, 3, [4, [1, 2], 5, 6], 8, 9];

const flatten = (arr) => {
  let newArr = [];
  arr.forEach((element) => {
    if (Array.isArray(element)) {
      newArr.push(...flatten(element));
    } else {
      newArr.push(element);
    }
  });
  return newArr;
};

console.log(flatten(a));

